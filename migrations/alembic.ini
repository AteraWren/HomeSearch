# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = migrations

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file as
# well as the filename.
# string value is passed to datetime.datetime.strftime()
# timezone = UTC

# max length of characters to apply to the "slug" field
# slug_length = 40

# set to 'true' to run the environment during the 'revision' command, regardless
# of autogenerate or whether --autogenerate is specified
# run_environment = false

# set to 'true' to allow .pyc and .pyo files without a source .py file to be detected
# as revisions in the versions/ directory
# sourceless = false

# version location specification; this defaults
# to migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_locations_separator".
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# version path separator; as mentioned above, this is the character used to split
# version_locations.  If this is empty, it means to use os.pathsep.
# version_locations_separator =

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

sqlalchemy.url = postgresql://Atera:saisai123@localhost/Home_rental

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# hooks =

# format the generated revision script with black
# hooks.black.type = console_scripts
# hooks.black.entrypoint = black
# hooks.black.options = -l 79

# print out a given template's context before running
# hooks.print_context.type = python
# hooks.print_context.entrypoint = myapp.env.print_template_context

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic,flask_migrate

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_flask_migrate]
level = INFO
handlers =
qualname = flask_migrate

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
